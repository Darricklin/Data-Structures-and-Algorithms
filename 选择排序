选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾。

选择排序空间复杂度为 O(1)，是一种原地排序算法。选择排序的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O(n2)。

那选择排序是稳定的排序算法吗？这个问题我着重来说一下。答案是否定的，选择排序是一种不稳定的排序算法。从我前面画的那张图中，你可以看出来，选择排序每次都要找剩余未排序元素中的最小值，
并和前面的元素交换位置，这样破坏了稳定性。比如 5，8，5，2，9 这样一组数据，使用选择排序算法来排序的话，第一次找到最小元素 2，与第一个 5 交换位置，那第一个 5 和中间的 5 顺序就变了，
所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。


package main

import "fmt"

func selectsort(arr []int) []int {
	l := len(arr)
	if l == 1 {
		return arr
	}
	for i := 0; i < l-1; i++ {
		for j := i + 1; j < l; j++ {
			if arr[j] < arr[i] {
				arr[i], arr[j] = arr[j], arr[i]
			}
		}
	}
	fmt.Println(arr)
	return arr
}
func main() {
	arr := []int{9, 2, 4, 1, 57, 32, 3}
	selectsort(arr)
}
