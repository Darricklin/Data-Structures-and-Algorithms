用go语言实现，给一组数字，要求从中选一个数字，要求剔除该数字左边一些数字，使得从该数字向左逐渐变小，剔除该数字右边一些数字，使得该数字向右逐渐变小。求最少剔除多少个数字可以实现

package main

import (
    "fmt"
)

// max 函数用于返回两个整数中的最大值
func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}

// solve 函数用于计算最少剔除数字的数量
func solve(nums []int) int {
    n := len(nums)
    if n == 0 {
        return 0
    }
    // 计算以每个位置为结尾的最长递增子序列长度
    left := make([]int, n)
    for i := 0; i < n; i++ {
        left[i] = 1
        for j := 0; j < i; j++ {
            if nums[j] < nums[i] {
                left[i] = max(left[i], left[j]+1)
            }
        }
    }
    // 计算以每个位置为开头的最长递减子序列长度
    right := make([]int, n)
    for i := n - 1; i >= 0; i-- {
        right[i] = 1
        for j := n - 1; j > i; j-- {
            if nums[j] < nums[i] {
                right[i] = max(right[i], right[j]+1)
            }
        }
    }
    // 找到最大的左右子序列长度之和
    maxLen := 0
    for i := 0; i < n; i++ {
        maxLen = max(maxLen, left[i]+right[i]-1)
    }
    // 计算最少剔除数字的数量
    return n - maxLen
}

func main() {
    nums := []int{1, 2, 3, 2, 1}
    result := solve(nums)
    fmt.Printf("最少剔除 %d 个数字可以实现要求。\n", result)
}
