二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。

我们假设数据大小是 n，每次查找后数据都会缩小为原来的一半，也就是会除以 2。最坏情况下，直到查找区间被缩小为空，才停止。可以看出来，这是一个等比数列。其中 n/2k=1 时，k 的值就是总共缩小的次数。而每一次缩小操作只涉及两个数据的大小比较，所以，经过了 k 次区间缩小操作，时间复杂度就是 O(k)。通过 n/2k=1，我们可以求得 k=log2n，所以时间复杂度就是 O(logn)。

二分查找应用场景的局限性

首先，二分查找依赖的是顺序表结构，简单点说就是数组。那二分查找能否依赖其他数据结构呢？比如链表。答案是不可以的，主要原因是二分查找算法需要按照下标随机访问元素。我们在数组和链表那两节讲过，数组按照下标随机访问数据的时间复杂度是 O(1)，而链表随机访问的时间复杂度是 O(n)。所以，如果数据使用链表存储，二分查找的时间复杂就会变得很高。二分查找只能用在数据是通过顺序表来存储的数据结构上。如果你的数据是通过其他数据结构存储的，则无法应用二分查找。

其次，二分查找针对的是有序数据。二分查找对这一点的要求比较苛刻，数据必须是有序的。如果数据没有序，我们需要先排序。

再次，数据量太小不适合二分查找。如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如我们在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。不过，这里有一个例外。如果数据之间的比较操作非常耗时，不管数据量大小，我都推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。

最后，数据量太大也不适合二分查找。二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，我们有 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。注意这里的“连续”二字，也就是说，即便有 2GB 的内存空间剩余，但是如果这剩余的 2GB 内存空间都是零散的，没有连续的 1GB 大小的内存空间，那照样无法申请一个 1GB 大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。

package main

import (
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
)

// 二分查找递归实现
func bfind(arr []int, n int) int {
	return bsearch(arr, 0, len(arr)-1, n)
}

func bsearch(arr []int, low, high, n int) int {
	//fmt.Printf("arr is %v,low is %v,high is %v\n",arr,low,high)
	if low > high {
		return -1
	}
	mid := (low + high) / 2
	//fmt.Printf("mid is %v,arr[mid]:%v\n",mid,arr[mid])
	if arr[mid] == n {
		return mid
	} else if n < arr[mid] {
		return bsearch(arr, low, mid-1, n)
	} else {
		return bsearch(arr, mid+1, high, n)
	}
}

// 二分查找非递归实现
func find(arr []int, n int) int {
	low := 0
	high := len(arr) - 1
	for low <= high {
		mid := (high + low) / 2
		if arr[mid] == n {
			return mid
		} else if arr[mid] > n {
			high = mid - 1
		} else {
			low = mid + 1
		}
	}
	return -1
}

// 二分查找求平方根
func sqrt(n, heaf float64) float64 {
	fmt.Printf("heaf is %v,heaf*heaf %v\n", heaf, heaf*heaf)
	if heaf*heaf == n {
		return heaf
	} else if heaf*heaf > n {
		if len(strings.Split(fmt.Sprintf("%v", heaf), ".")[1]) == 10 {
			value, _ := decimal.NewFromFloat(heaf).Round(6).Float64()
			return value
		} else {
			return sqrt(n, heaf/2)
		}
	} else {
		if len(strings.Split(fmt.Sprintf("%v", heaf), ".")[1]) == 10 {
			value, _ := decimal.NewFromFloat(heaf).Round(6).Float64()
			return value
		} else {
			return sqrt(n, heaf+heaf/2)
		}
	}
}

func main() {
	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}
	fmt.Println(find(arr, 6))
	fmt.Println(bfind(arr, 6))
	fmt.Println(sqrt(17, 8.5))
	heaf := float64(4.2346545)
	fmt.Println(len(strings.Split(fmt.Sprintf("%v", heaf), ".")[1]))
	fmt.Println(decimal.NewFromFloat(heaf).Round(6).Float64())
}


二分查找的变体

package main

import (
	"fmt"
)

// 查找第一个值等于给定值的元素
func binse(arr []int, n int) int {
	low := 0
	high := len(arr) - 1
	for low <= high {
		mid := (high + low) / 2
		if arr[mid] == n {
			if mid == 0 || arr[mid-1] != n {
				return mid
			} else {
				high = mid - 1
			}
		} else if arr[mid] > n {
			high = mid - 1
		} else {
			low = mid + 1
		}
	}
	return -1
}

//查找最后一个值等于给定值的元素
func binse2(arr []int, n int) int {
	low := 0
	high := len(arr) - 1
	for low <= high {
		mid := (high + low) / 2
		if arr[mid] == n {
			if mid == len(arr)-1 || arr[mid+1] != n {
				return mid
			} else {
				low = mid + 1
			}
		} else if arr[mid] > n {
			high = mid - 1
		} else {
			low = mid + 1
		}
	}
	return -1
}

//查找第一个大于等于给定值的元素
func binse3(arr []int, n int) int {
	low := 0
	high := len(arr) - 1
	for low <= high {
		mid := (high + low) / 2
		if arr[mid] >= n {
			if mid == 0 || arr[mid-1] < n {
				return mid
			} else {
				high = mid - 1
			}
		} else {
			low = mid + 1
		}
	}
	return -1
}

//查找最后一个小于等于给定值的元素
func binse4(arr []int, n int) int {
	low := 0
	high := len(arr) - 1
	for low <= high {
		mid := (high + low) / 2
		if arr[mid] > n {
			high = mid - 1
		} else {
			if mid == len(arr)-1 || arr[mid+1] > n {
				return mid
			} else {
				low = mid + 1
			}
		}
	}
	return -1
}

func main() {
	arr := []int{1, 2, 3, 5, 5, 5, 5, 6}
	fmt.Println(binse(arr, 5))
	fmt.Println(binse2(arr, 5))
	fmt.Println(binse3(arr, 4))
	fmt.Println(binse4(arr, 4))
}
