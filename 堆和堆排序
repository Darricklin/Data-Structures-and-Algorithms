堆这种数据结构的应用场景非常多，最经典的莫过于堆排序了。堆排序是一种原地的、时间复杂度为 O(nlogn) 的排序算法。在实际开发中，为什么快速排序要比堆排序性能好？第一点，堆排序数据访问
的方式没有快速排序友好。第二点，对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序。

第一点，堆必须是一个完全二叉树。还记得我们之前讲的完全二叉树的定义吗？完全二叉树要求，除了最后一层，其他层的节点个数都是满的，最后一层的节点都靠左排列。
第二点，堆中的每个节点的值必须大于等于（或者小于等于）其子树中每个节点的值。实际上，我们还可以换一种说法，堆中每个节点的值都大于等于（或者小于等于）其左右子节点的值。这两种表述是
等价的。对于每个节点的值都大于等于子树中每个节点值的堆，我们叫做“大顶堆”。对于每个节点的值都小于等于子树中每个节点值的堆，我们叫做“小顶堆”。

如何实现一个堆？
要实现一个堆，我们先要知道，堆都支持哪些操作以及如何存储一个堆。

完全二叉树比较适合用数组来存储。用数组来存储完全二叉树是非常节省存储空间的。因为我们不需要存储左右子节点的指针，单纯地通过数组的下标，就可以找到一个节点的左右子节点和父节点。数组
中下标为 i 的节点的左子节点，就是下标为 i∗2 的节点，右子节点就是下标为 i∗2+1 的节点，父节点就是下标为 i/2的节点。


往堆中插入一个元素和删除堆顶元素的时间复杂度都是 O(logn)。
1. 往堆中插入一个元素
往堆中插入一个元素后，我们需要继续满足堆的两个特性。这个过程我们起了一个名字，就叫做堆化（heapify）。堆化非常简单，就是顺着节点所在的路径，向上或者向下，对比，然后交换。

2. 删除堆顶元素

当我们删除堆顶元素之后，就需要把第二大的元素放到堆顶，那第二大元素肯定会出现在左右子节点中。然后我们再迭代地删除第二大节点，以此类推，直到叶子节点被删除。

我们把最后一个节点放到堆顶，然后利用同样的父子节点对比方法。对于不满足父子节点大小关系的，互换两个节点，并且重复进行这个过程，直到父子节点之间满足大小关系为止。这就是从上往下的
堆化方法。


如何基于堆实现排序？
堆排序整体的时间复杂度是 O(nlogn)
我们可以把堆排序的过程大致分解成两个大的步骤，建堆和排序。

1. 建堆
建堆过程的时间复杂度是 O(n)
第一种是借助我们前面讲的，在堆中插入一个元素的思路。尽管数组中包含 n 个数据，但是我们可以假设，起初堆中只包含一个数据，就是下标为 1 的数据。然后，我们调用前面讲的插入操作，将下标
从 2 到 n 的数据依次插入到堆中。这样我们就将包含 n 个数据的数组，组织成了堆。

第二种实现思路，跟第一种截然相反，也是我这里要详细讲的。第一种建堆思路的处理过程是从前往后处理数组数据，并且每个数据插入堆中时，都是从下往上堆化。而第二种实现思路，是从后往前处理
数组，并且每个数据都是从上往下堆化。

2. 排序

排序过程的时间复杂度是 O(nlogn)
建堆结束之后，数组中的数据已经是按照大顶堆的特性来组织的。数组中的第一个元素就是堆顶，也就是最大的元素。我们把它跟最后一个元素交换，那最大元素就放到了下标为 n 的位置。这个过程有点
类似上面讲的“删除堆顶元素”的操作，当堆顶元素移除之后，我们把下标为 n 的元素放到堆顶，然后再通过堆化的方法，将剩下的 n−1 个元素重新构建成堆。堆化完成之后，我们再取堆顶的元素，放到
下标是 n−1 的位置，一直重复这个过程，直到最后堆中只剩下标为 1 的一个元素，排序工作就完成了。

堆的应用一：优先级队列

一个堆就可以看作一个优先级队列。很多时候，它们只是概念上的区分而已。往优先级队列中插入一个元素，就相当于往堆中插入一个元素；从优先级队列中取出优先级最高的元素，就相当于取出堆顶元素。

堆的应用二：利用堆求 Top K

针对静态数据，如何在一个包含 n 个数据的数组中，查找前 K 大数据呢？我们可以维护一个大小为 K 的小顶堆，顺序遍历数组，从数组中取出数据与堆顶元素比较。如果比堆顶元素大，我们就把堆顶元
素删除，并且将这个元素插入到堆中；如果比堆顶元素小，则不做处理，继续遍历数组。这样等数组中的数据都遍历完之后，堆中的数据就是前 K 大数据了。

堆的应用三：利用堆求中位数

借助堆这种数据结构，我们不用排序，就可以非常高效地实现求中位数操作。我们来看看，它是如何做到的？
我们需要维护两个堆，一个大顶堆，一个小顶堆。大顶堆中存储前半部分数据，小顶堆中存储后半部分数据，且小顶堆中的数据都大于大顶堆中的数据。也就是说，如果有 n 个数据，n 是偶数，我们从小
到大排序，那前 2n​ 个数据存储在大顶堆中，后 2n​ 个数据存储在小顶堆中。这样，大顶堆中的堆顶元素就是我们要找的中位数。如果 n 是奇数，情况是类似的，大顶堆就存储 2n​+1 个数据，小顶堆
中就存储 2n​ 个数据。
如果新加入的数据小于等于大顶堆的堆顶元素，我们就将这个新数据插入到大顶堆；否则，我们就将这个新数据插入到小顶堆。这个时候就有可能出现，两个堆中的数据个数不符合前面约定的情况：如果 n
是偶数，两个堆中的数据个数都是 2n​；如果 n 是奇数，大顶堆有 2n​+1 个数据，小顶堆有 2n​ 个数据。这个时候，我们可以从一个堆中不停地将堆顶元素移动到另一个堆，通过这样的调整，来让两个
堆中的数据满足上面的约定。


package main

import (
	"fmt"
)

type Heap struct {
	Arr   []int
	Cap   int
	Count int
}

func NewHeap(cap int) *Heap {
	return &Heap{
		Arr:   make([]int, cap+1),
		Cap:   cap,
		Count: 0,
	}
}

// 插入一个元素
func (h *Heap) put(data int) {
	if h.Count >= h.Cap {
		fmt.Println("full")
	}
	h.Count++
	h.Arr[h.Count] = data
	par := h.Count / 2
	tail := h.Count
	for h.Arr[par] < h.Arr[tail] && par > 0 {
		h.Arr[tail], h.Arr[par] = h.Arr[par], h.Arr[tail]
		tail = par
		par = par / 2
	}
}

// 删除堆顶元素
func (h *Heap) DelHead() {
	headIndex := 1
	h.Arr[headIndex] = h.Arr[h.Count]
	h.Arr[h.Count] = 0
	h.Count--
	fmt.Printf("==h.arr :%v\n", h.Arr)
	for headIndex*2 <= h.Count {
		left := h.Arr[headIndex*2]
		right := h.Arr[headIndex*2+1]
		//fmt.Printf("****h.arr :%v, headIndex : %v,left : %v,right: %v\n", h.Arr, headIndex, left, right)
		if h.Arr[headIndex] >= left && h.Arr[headIndex] >= right {
			break
		}
		if left > right {
			if left > h.Arr[headIndex] {
				h.Arr[headIndex*2], h.Arr[headIndex] = h.Arr[headIndex], h.Arr[headIndex*2]
				headIndex = headIndex * 2
			}
		} else {
			if right > h.Arr[headIndex] {
				h.Arr[headIndex*2+1], h.Arr[headIndex] = h.Arr[headIndex], h.Arr[headIndex*2+1]
				headIndex = headIndex*2 + 1
			}
		}
	}
}

// 将数组堆化
func (h *Heap) HeapArr() {
	tail := h.Count
	for tail >= 2 {
		par := tail / 2
		//fmt.Printf("****h1.arr :%v, par : %v,tail: %v\n", h.Arr, par,tail)
		if h.Arr[par] < h.Arr[tail] {
			h.Arr[par], h.Arr[tail] = h.Arr[tail], h.Arr[par]
			//fmt.Printf("=====h1.arr :%v, par : %v,tail: %v\n", h.Arr, par, tail)
			tailisHead := tail
			for tailisHead*2 <= h.Count {
				left := h.Arr[tailisHead*2]
				right := h.Arr[tailisHead*2+1]
				//fmt.Printf("++++h.arr :%v, headIndex : %v,left : %v,right: %v\n", h.Arr, tailisHead, left, right)
				if h.Arr[tailisHead] >= left && h.Arr[tailisHead] >= right {
					break
				}
				if left > right {
					if left > h.Arr[tailisHead] {
						h.Arr[tailisHead*2], h.Arr[tailisHead] = h.Arr[tailisHead], h.Arr[tailisHead*2]
						tailisHead = tailisHead * 2
					}
				} else {
					if right > h.Arr[tailisHead] {
						h.Arr[tailisHead*2+1], h.Arr[tailisHead] = h.Arr[tailisHead], h.Arr[tailisHead*2+1]
						tailisHead = tailisHead*2 + 1
					}
				}
			}
		}
		tail--
	}
}

// 堆排序
func (h *Heap) heapSort() {
	tmpcount := h.Count
	for i := h.Count; i >= 1; i-- {
		headIndex := 1
		h.Arr[headIndex], h.Arr[tmpcount] = h.Arr[tmpcount], h.Arr[headIndex]
		tmpcount--
		fmt.Printf("==h.arr :%v,tmpcount: %v\n", h.Arr, tmpcount)
		for headIndex*2 <= tmpcount {
			left := h.Arr[headIndex*2]
			right := h.Arr[headIndex*2+1]
			if headIndex*2 == tmpcount {
				right = 0
			}
			//fmt.Printf("****h.arr :%v, headIndex : %v,left : %v,right: %v\n", h.Arr, headIndex, left, right)
			if h.Arr[headIndex] >= left && h.Arr[headIndex] >= right {
				break
			}
			if left > right {
				if left > h.Arr[headIndex] {
					h.Arr[headIndex*2], h.Arr[headIndex] = h.Arr[headIndex], h.Arr[headIndex*2]
					headIndex = headIndex * 2
				}
			} else {
				if right > h.Arr[headIndex] {
					h.Arr[headIndex*2+1], h.Arr[headIndex] = h.Arr[headIndex], h.Arr[headIndex*2+1]
					headIndex = headIndex*2 + 1
				}
			}
		}
	}
}

// 求最大的n个值
func (h *Heap) TopK(arr []int, k int) {
	for _, value := range arr {
		//fmt.Printf("+++h.arr :%v,h.count: %v ,value is %v\n", h.Arr,h.Count,value)
		if h.Count == k {
			if value < h.Arr[1] {
				h.DelHead()
				h.put(value)
			}
			//fmt.Printf("---h.arr :%v\n", h.Arr)
		} else {
			h.put(value)
		}

	}
}

func main() {
	h := NewHeap(10)
	h.put(1)
	fmt.Println("1==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(2)
	fmt.Println("2==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(3)
	fmt.Println("3==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(4)
	fmt.Println("4==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(5)
	fmt.Println("5==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(6)
	fmt.Println("6==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(7)
	fmt.Println("7==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.put(8)
	fmt.Println("8==========")
	fmt.Printf("h.arr :%v\n", h.Arr)
	h.DelHead()
	fmt.Printf("h.arr :%v\n", h.Arr)
	h1 := NewHeap(20)
	h1.Arr = []int{0, 7, 8, 10, 23, 12, 14, 15, 19, 76, 25, 36}
	h1.Count = len(h1.Arr[1:])
	fmt.Printf("h1.arr :%v\n", h1.Arr)
	h1.HeapArr()
	fmt.Printf("h1.arr :%v\n", h1.Arr)
	h1.DelHead()
	fmt.Printf("h1.arr :%v\n", h1.Arr)
	fmt.Println("==========")
	h1.heapSort()
	fmt.Printf("h1.arr :%v\n", h1.Arr)
	h2 := NewHeap(20)
	arr := []int{70, 80, 10, 23, 125, 14, 15, 19, 76, 25, 36}
	fmt.Println("==========")
	fmt.Printf("h2.arr :%v\n", h2.Arr)
	h2.TopK(arr, 5)
	fmt.Printf("h2.arr :%v\n", h2.Arr)
	h2.heapSort()
	fmt.Printf("h2.arr :%v\n", h2.Arr)

}
