归并排序的核心思想还是蛮简单的。如果要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。
归并排序使用的就是分治思想。分治，顾名思义，就是分而治之，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。从我刚才的描述，你有没有感觉到，分治思想跟我们前面
讲的递归思想很像。是的，分治算法一般都是用递归来实现的。分治是一种解决问题的处理思想，递归是一种编程技巧，这两者并不冲突。分治算法的思想我后面会有专门的一节来讲，现在不展开讨论，我
们今天的重点还是排序算法。前面我通过举例让你对归并有了一个感性的认识，又告诉你，归并排序用的是分治思想，可以用递归来实现。我们现在就来看看如何用递归代码来实现归并排序。


归并排序是一个稳定的排序算法。归并排序的时间复杂度是 O(nlogn)。归并排序不是原地排序算法。这是因为归并排序的合并函数，在合并两个有序数组为一个有序数组时，需要借助额外的存储空间。空
间复杂度是 O(n)。



package main

import "fmt"

func guibing(arr []int) []int {
	l := len(arr)
	if l <= 1 {
		return arr
	}
	gbSort(arr, 0, l-1)
	fmt.Println(arr)
	return arr
}
func gbSort(arr []int, start, end int) {
	if start >= end {
		return
	}
	mid := (start + end) / 2
	gbSort(arr, start, mid)
	gbSort(arr, mid+1, end)
	merge(arr, start, mid, end)
}
func merge(arr []int, start, mid, end int) {
	tmp := make([]int, end-start+1)
	k := 0
	i := start
	j := mid + 1
	for ; i <= mid && j <= end; k++ {
		if arr[i] < arr[j] {
			tmp[k] = arr[i]
			i++
		} else {
			tmp[k] = arr[j]
			j++
		}
	}
	for ; i <= mid; i++ {
		tmp[k] = arr[i]
		k++
	}
	for ; j <= end; j++ {
		tmp[k] = arr[j]
		k++
	}
	copy(arr[start:end+1], tmp)
}
func main() {
	arr := []int{9, 2, 4, 1, 57, 32, 3}
	guibing(arr)
}
